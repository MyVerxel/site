<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Blog</title>
    <link>https://f4.anthus.ir/posts/</link>
    <description>Recent content in Posts on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>&lt;3</copyright>
    <lastBuildDate>Wed, 03 Feb 1402 03:35:02 +0000</lastBuildDate><atom:link href="https://f4.anthus.ir/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang-libs</title>
      <link>https://f4.anthus.ir/posts/golang-libs/</link>
      <pubDate>Wed, 03 Feb 1402 03:35:02 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/golang-libs/</guid>
      <description>fmt fmt.Println(i) fmt.Sprintf(&amp;#34;%v&amp;#34;, v) fmt.Sprintf(&amp;#34;%d&amp;#34;, ip[0]) str := fmt.Sprint( int( ip[i] ) ) Printf فایل pdf
var ( planet = &amp;#34;venus&amp;#34; distance = 261 orbital = 224.701 hasLife = false ) // swiss army knife %v verb fmt.Printf(&amp;#34;Planet: %v\n&amp;#34;, planet) fmt.Printf(&amp;#34;Distance: %v millions kms\n&amp;#34;, distance) fmt.Printf(&amp;#34;Orbital Period: %v days\n&amp;#34;, orbital) fmt.Printf(&amp;#34;Does %v have life? %v\n&amp;#34;, planet, hasLife) fmt.Printf(&amp;#34;Orbital Period: %f days\n&amp;#34;, orbital) fmt.Printf(&amp;#34;Orbital Period: %.0f days\n&amp;#34;, orbital) fmt.Printf(&amp;#34;Orbital Period: %.1f days\n&amp;#34;, orbital) fmt.</description>
    </item>
    
    <item>
      <title>Golang-2</title>
      <link>https://f4.anthus.ir/posts/golang-2/</link>
      <pubDate>Thu, 08 Oct 1401 15:29:30 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/golang-2/</guid>
      <description>Methods در زبان گو کلاس نداریم در نتیجه باید از تایپ ها استفاده کنیم
type Vertex struct { X, Y float64 } func (v Vertex) Abs() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func main() { v := Vertex{3, 4} fmt.Println(v.Abs()) } در اینجا تابع abs به ساختار Vertex متصل شده است و اگر یک نمومه از vertex بسازیم میتوانیم به متدهای مختصی این ساختار دسترسی داشته باشیم
package main import &amp;#34;fmt&amp;#34; type F struct { x int y string } func ( f F ) test (s string) string { return s } func main() { i := F{} fmt.</description>
    </item>
    
    <item>
      <title>docker</title>
      <link>https://f4.anthus.ir/posts/docker/</link>
      <pubDate>Mon, 06 Apr 1401 18:29:27 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/docker/</guid>
      <description>تمام دستورات با sudo اجرا میشود
ایجاد یک داکر $ cat Dockerfile FROM ubuntu:latest RUN apt-get update -y RUN apt-get install curl cron -y CMD [ &amp;#39;/bin/bash&amp;#39; ] ساختن داکر
docker build -t NAME:TAG . docker build -t mybash:v1 . اجرا docker run --rm -it mybash:v1 [/bin/bash] Expose Port docker run --rm -it -p 8080:80 mybash:v1 [ CMD ] Map Volume docker run --rm -it -p 8080:80 -v /home/app:/home/a mybash:v1 [ CMD ] LOGIN docker login --username [USERNAME] docker login ghcr.</description>
    </item>
    
    <item>
      <title>Pandas</title>
      <link>https://f4.anthus.ir/posts/pandas/</link>
      <pubDate>Wed, 11 Mar 1401 16:14:59 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/pandas/</guid>
      <description>Start ایمپورت کردن :
import pandas as pd تمامی دیتا فریم ها رو با d نشون خواهم داد
در پانداس مبنای کار بر اساس دیتا فریم است؛ در مرحله اول دیتا ها را باید به شکل دیتافریم ایجد کنیم تا بتوانیم توسط پانداس با آنها کار کنیم
دیتاها میتوانند از متغیر ها و یا از فایلها وارد شوند
read from excel d = pd.read_excel(&amp;#34;file.xls&amp;#34;, header=[1] ) توسز پارامتر header تعییرن میکنیم که کدام که سطر اول را به عنوان هدر فیلد ها در نظر بگیرد</description>
    </item>
    
    <item>
      <title>android</title>
      <link>https://f4.anthus.ir/posts/android/</link>
      <pubDate>Sat, 04 Oct 1400 00:00:27 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/android/</guid>
      <description>SEARCH GRIDE LAYOUT (FILE J) اکتیوی ها از کلاس AppCompatActivity ارث میبرند
TextView tv ; Button bt; متغیر های tv و bt از نوه تکست و دکمه هستند،
setContentView نحتوای layout رو نشون میده که در فایل های xml هستند
نحوه دسترسی به ریسورس ها در جا وا از سریق کلاس R
و در xml از طریق @ و میتونیم به ریسوسرس دسترسی پیدا کنیم
setContentView(R.layout.activity_main); ... findViewById( R.id.textView ); //.</description>
    </item>
    
    <item>
      <title>Afl</title>
      <link>https://f4.anthus.ir/posts/afl/</link>
      <pubDate>Tue, 30 Sep 1400 10:30:27 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/afl/</guid>
      <description>تمامی عبارت ها به سمی‌کالن بسته می‌شود از نقطه برای دسترسی به ابجکت مورد نظر استفاده میشود به بزرگی کوچکی حروف حساسیت نیستند امکان اینها ارایه هستند
o open c close h high l low v volume آرایه ها از طریق براکت می‌توان مقداری را ست کرد ویا صدا زد
a[0] = 33 //set a[0] //get مثال MA( Close, 10 ); IIf( H &amp;gt; Ref(H,-1), MA(H,20), MA(C,20) ); relational ( &amp;lt;, &amp;gt;, &amp;lt;=, &amp;gt;= ) equality ( ==, !</description>
    </item>
    
    <item>
      <title>java</title>
      <link>https://f4.anthus.ir/posts/java/</link>
      <pubDate>Thu, 25 Sep 1400 12:45:43 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/java/</guid>
      <description>شروع: //filename Gg.java public class Gg{ public static void main ( String[] args ) { ... } } خواندن از ورودی import java.util.Scanner; // program uses class Scanner Scanner input new Scanner(System.in); number1= input.nextInt (); نوشتن در خروجی System.out.print() System.out.println() System.out.printf( format , ...) تعریف متغیر int number1; اینها نوع اصلی هستند که باید به حروف کوچک نوشته شوند
int float double char boolean byte short long محاسبات حرف ٪ به معنی باقیمانده است</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://f4.anthus.ir/posts/golang/</link>
      <pubDate>Fri, 04 Jul 1400 23:31:53 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/golang/</guid>
      <description>package: هر برنامه باید دارای یک پکیچ باشد :
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; ) func main() { fmt.Println(&amp;#34;My favorite number is&amp;#34;, rand.Intn(10)) } import توسط import میتوانیم پیکیج‌ی را وارد برنام کنیم؛
نام پکیج باید استرینگ باشد؛ یعنی در دابل کوتیشین قرار بگیرد
import &amp;#34;fmt&amp;#34; همچنین شبیه به پایتون میتوانیم برای پکیج بک نام تعیین کنیم تا توسط آن نام به پکیج دسترسی داشته باشیم
import f &amp;#34;fmt&amp;#34; که در انجا بچای استفاده از fmt در برنام میتوانیم از f استفاده کنیم</description>
    </item>
    
    <item>
      <title>Vlang</title>
      <link>https://f4.anthus.ir/posts/vlang/</link>
      <pubDate>Thu, 03 Jul 1400 02:31:16 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/vlang/</guid>
      <description>نصب : git clone https://github.com/vlang/v cd v make ساختار برنامه : fn main() { println(&amp;#39;hello world&amp;#39;) } comment: // ... /* ..... */ functions 1 : نوع متغیر بعد از اسم آن میآید
fn NAME ( var TYPE ) TYPE { } توابع میتوانند اول فراخونی شوند و در ادامه تعریف شوند &amp;hellip;
fn main() { println(add(77, 33)) println(sub(100, 50)) } fn add(x int, y int) int { return x + y } fn sub(x int, y int) int { return x - y } برگشت چند متغیری:</description>
    </item>
    
    <item>
      <title>بعداز تغییرات</title>
      <link>https://f4.anthus.ir/posts/%D8%A8%D8%B9%D8%AF%D8%A7%D8%B2-%D8%AA%D8%BA%DB%8C%DB%8C%D8%B1%D8%A7%D8%AA/</link>
      <pubDate>Wed, 02 Jul 1400 06:14:12 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/%D8%A8%D8%B9%D8%AF%D8%A7%D8%B2-%D8%AA%D8%BA%DB%8C%DB%8C%D8%B1%D8%A7%D8%AA/</guid>
      <description>کاستون کانفیگ برای تغییر URL اضافه شد</description>
    </item>
    
    <item>
      <title>شروع کار وبلاگ</title>
      <link>https://f4.anthus.ir/posts/%D8%B4%D8%B1%D9%88%D8%B9-%DA%A9%D8%A7%D8%B1-%D9%88%D8%A8%D9%84%D8%A7%DA%AF/</link>
      <pubDate>Wed, 02 Jul 1400 05:26:11 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/%D8%B4%D8%B1%D9%88%D8%B9-%DA%A9%D8%A7%D8%B1-%D9%88%D8%A8%D9%84%D8%A7%DA%AF/</guid>
      <description>هم ازطریق سایت ورکل و هم از طریق خود گیتهاب این وبلاگ در دسترس است
میتونید ورک فلو اینکار رو در گیتهاب پروژه ببینید</description>
    </item>
    
    <item>
      <title>نوشتار اول</title>
      <link>https://f4.anthus.ir/posts/%D8%A7%D9%88%D9%84%DB%8C%D9%86-%D9%86%D9%88%D8%B4%D8%AA%D8%A7%D8%B1/</link>
      <pubDate>Wed, 02 Jul 1400 02:11:13 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/%D8%A7%D9%88%D9%84%DB%8C%D9%86-%D9%86%D9%88%D8%B4%D8%AA%D8%A7%D8%B1/</guid>
      <description>اولین پست من برای شروع کار</description>
    </item>
    
    <item>
      <title>ESP</title>
      <link>https://f4.anthus.ir/posts/esp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://f4.anthus.ir/posts/esp/</guid>
      <description>منبع: SOURCE
Setup Toolchain : install tool chin linux :
sudo apt-get install gcc git wget make libncurses-dev flex bison gperf python python-serial wget https://dl.espressif.com/dl/xtensa-lx106-elf-gcc8_4_0-esp-2020r3-linux-amd64.tar.gz mkdir -p esp cd esp tar -xzf Downloads/xtensa-lx106-elf-linux64-1.22.0-100-ge567ec7-5.2.0.tar.gz #/home/ali/Desktop/esp/xtensa-lx106-elf/xtensa-lx106-elf/bin # add to .bashrc PATH=$PATH:/home/ali/Desktop/esp/xtensa-lx106-elf/xtensa-lx106-elf/bin alias get_lx106=&amp;#39;export PATH=&amp;#34;$PATH:/home/ali/Desktop/esp/xtensa-lx106-elf/xtensa-lx106-elf/bin&amp;#34;&amp;#39; set permition:
sudo usermod -a -G dialout $USER sudo chmod -R 777 /dev/ttyUSB0 GET SDK Get ESP8266_RTOS_SDK cd esp git clone --recursive https://github.com/espressif/ESP8266_RTOS_SDK.git </description>
    </item>
    
  </channel>
</rss>
